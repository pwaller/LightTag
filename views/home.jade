div.content
  div.page-header
    h1 #{title}
      small 
  
  #welcome.container.row
    h2 Welcome!
    .span8
      form#form.well.form-inline(onsubmit="return false;")
        .row
          .span2
            label Who are you?
          .span4
            input#name(type="text", placeholder=".. I am bob")
            //
            button.btn(type="submit") Go!
        .row
          .offset2.span4
            ul.color-chooser
              each color in colors
                li.color(class="labelstyle-#{color}")
                  label
                    input(name="color", type="radio", value="#{color}")
  
  .container.row
    #ncirc 0
    #players.span2
      //div.alert.alert-info
        h4 a
        .progress.progress-success
          .bar(style="width: 50%")
    .span8  
      div#container(style='text-align: center;')// border: 2px solid red;')

footer

script
  $(function () {
    $("#name").focus();
    
    $("#form input[name=color]:first").prop("checked", true).parents("li").addClass("selected");
    
    $(".color-chooser input").click(function () {
      console.log("Clicked! ", $(this).val());
      $(".color-chooser li").removeClass("selected");
      $(this).parents("li").addClass("selected");
    });
    
    $("input,button", this).prop("disabled", false);
    
    $("#form").submit(function (e) {
      e.preventDefault();
      $("#form").off("submit");
      // Prevent duplicate submission:
      $("input,button", this).prop("disabled", true);
      //$("#form").prop("disabled", true);
      
      var name = $("#name").val();
      $("#players").append(
        $("<div>").addClass("alert alert-info")
          .append($("<div>").text("Le " + name))
          .append($("<div>").addClass("progress progress-success")
            .append($("<div>").addClass("bar").attr("style", "width: 20%")))
          
          );
          
      $("#welcome").fadeOut();
      
      canvas_element = init_graphics();
      canvas_element.hide().delay(500).fadeIn();
    });
  });
  // set the scene size
  var WIDTH = 640,
    HEIGHT = 480,
    DIAGONAL = Math.sqrt(Math.pow(WIDTH, 2) + Math.pow(HEIGHT, 2));
  function init_graphics() {  

    // get the DOM element to attach to
    // - assume we've got jQuery to hand
    var container = $('#container');
    
    var renderer = new THREE.WebGLRenderer();
    // TODO(pwaller): Implement fallback, use less points on shells
    //var renderer = new THREE.CanvasRenderer();
    var renderer_element = $(renderer.domElement);
    renderer.setSize(WIDTH, HEIGHT);

    container.append(renderer.domElement);
    renderer.domElement.onselectstart = function () { return false; }
    renderer_element.attr("style", "display:inline; background: black; cursor:none;");
    // border: 2px solid grey; margin: 0 auto");
    
    var scene = new THREE.Scene();
    
    var camera = new THREE.OrthographicCamera(0, WIDTH, 0, HEIGHT, -100, 400);
    scene.add(camera);
        
    var pointLight = new THREE.PointLight(0xFFFFFF);
    pointLight.position.x = WIDTH / 2;
    pointLight.position.y = HEIGHT / 2;
    pointLight.position.z = -130;
    scene.add(pointLight);    
    scene.add(new THREE.AmbientLight(0x000f00));
    
    parent = new THREE.Object3D();
    scene.add(parent);
    
    function animate() {
      renderer.render(scene, camera);
      requestAnimationFrame(animate);
    }
    
    animate();
    
    var players = {};
    
    var mycolor = parseInt($("input[name=color]:checked").val(), 16);
    
    function Player(id) {
      this.id = id;
      this.x = 0;
      this.y = 0;
      
      var sphereMaterial = new THREE.MeshLambertMaterial({color: mycolor});
      var sphere = new THREE.Mesh(new THREE.SphereGeometry(10, 8, 8), sphereMaterial);

      sphere.position.x = WIDTH / 2;
      sphere.position.y = HEIGHT / 2;
      sphere.position.z = 0;

      this.move = function (data) {
        sphere.position.x = data[0]; sphere.position.y = data[1];
      };
      
      this.gone = function () {
        scene.remove(sphere);
      }
      
      scene.add(sphere);
    }
    
    var me = new Player(0);
    
    evolve_shells();
    
    renderer_element
      .mousemove(function (e) {
        data = [e.pageX - renderer_element.offset().left, e.pageY - renderer_element.offset().top];
        me.move(data);
        socket.emit("move", data);
        shells.push(new Shell(data[0], data[1]));
      })
      .click(function (e) {
        data = [e.pageX - renderer_element.offset().left, e.pageY - renderer_element.offset().top];
        shells.push(new Shell(data[0], data[1]));
      });
      
    
    var socket = io.connect('http://192.168.0.7');
    
    socket.on('position update', function (who, where) {
      player = players[who];
      player.move(where);
    });
        
    socket.on('connected players', function (data) {
      for (who in data) {
        who = data[who];
        player = new Player(who);
        players[player.id] = player;
      }
    });
    
    socket.on('player connected', function (who) {
      player = new Player(who);
      players[player.id] = player;
    });
    
    socket.on('player disconnected', function (who) {
      players[who].gone();
      delete players[who];
    });
    
    return renderer_element;
  }
